{"version":3,"file":"auto-form.js","sources":["../src/utils.ts","../src/useFormBuilder.tsx","../src/widgets/helpers.ts","../src/components/Form/Form.tsx","../src/components/FormGroup/AutoFormFormGroup.tsx","../src/widgets/FormArrayComponent.tsx","../src/widgets/FormLegendComponent.tsx","../src/widgets/FormInputComponent.tsx","../src/widgets/FormFilesComponent.tsx","../src/widgets/FormMapsetComponent.tsx","../src/widgets/FormSelectComponent.tsx","../src/widgets/FormTextAreaComponent.tsx","../src/widgets/FormTypeaheadComponent.tsx","../src/widgets/FormCheckboxComponent.tsx","../src/widgets/FormHiddenComponent.tsx","../src/widgets/FormDurationComponent.tsx","../src/widgets/FormDateComponent.tsx","../src/widgets/FormSwitchComponent.tsx","../src/widgets/FormMultiSelectComponent.tsx","../src/widgets/FormCustomComponent.tsx","../src/widgets/FormListComponent.tsx","../src/AutoFormContext.tsx","../src/models.ts","../src/useDefinitionCompiler.tsx","../src/AutoForm.tsx","../src/helpers.ts","../src/useDefinitionLabledValues.ts"],"sourcesContent":["/**\n * Returns a new configuredProperties object with any default values set from\n * the given definition if they aren't set already\n *\n * @param properties\n * @param initial\n */\nimport { IFormDefinition, IFormDefinitionProperty } from './models';\n\n/**\n * Ensure that the input values match the property definitions\n */\nexport function sanitizeValues<T>(\n  definition: IFormDefinition,\n  initialValue: any = {}\n): T {\n  return Object.keys(definition).reduce((result, key): any => {\n    const prop = definition[key];\n    if (prop.type === 'legend') {\n      return result;\n    }\n    const value = massageValue(prop, initialValue[key], prop.defaultValue);\n    return { ...result, [key]: value };\n  }, {}) as T;\n}\n\n/**\n * Add the 'name' field from the property ID and sort them by the 'order' property\n */\nexport function enrichAndOrderProperties(definition: IFormDefinition) {\n  return Object.keys(definition)\n    .filter(key => check(definition[key]))\n    .map(key => ({\n      ...definition[key],\n      name: key,\n      required: massageRequired(definition[key]),\n      type: massageType(definition[key]),\n    }))\n    .sort((a, b) => {\n      const aOrder = (a.order || 0) as number;\n      const bOrder = (b.order || 0) as number;\n      return aOrder - bOrder;\n    });\n}\n\n/**\n * Converts various values passed into the property type to known input types\n *\n * @param property\n */\nexport function massageType(property: IFormDefinitionProperty) {\n  let type = property.type || 'text';\n  switch (type) {\n    case 'hidden':\n      return type;\n    case 'int':\n    case 'integer':\n    case 'long':\n      type = 'number';\n      break;\n    case 'string':\n      type = 'text';\n      break;\n    case 'STRING':\n      type = 'text';\n      break;\n    case 'boolean':\n      type = 'checkbox';\n  }\n  if (\n    typeof property.enum !== 'undefined' &&\n    property.enum.length &&\n    type !== 'typeahead' &&\n    type !== 'list'\n  ) {\n    /**\n     * Default to `select` unless property.type === 'typeahead'\n     */\n    type = 'select';\n  }\n  if (typeof property.secret === 'boolean' && property.secret) {\n    type = 'password';\n  }\n  return type;\n}\n\n/**\n * Ensure that the 'required' property is false for checkboxes and hidden fields\n *\n * This is a candidate for removal in the future, as it's a workaround\n *\n * @param property\n */\nexport function massageRequired(property: IFormDefinitionProperty): any {\n  switch (property.type) {\n    case 'boolean':\n    case 'checkbox':\n    case 'switch':\n    case 'hidden':\n      return false;\n    default:\n      return property.required;\n  }\n}\n\nexport function check(property: IFormDefinitionProperty): boolean {\n  return property.type !== 'notfield';\n}\n\nexport function getNewArrayRow(definition: IFormDefinition) {\n  return sanitizeValues(definition, {});\n}\n\nexport function getNewArrayRows(missing: number, definition: IFormDefinition) {\n  const answer: any[] = [];\n  for (let i = 0; i < missing; i++) {\n    answer.push(getNewArrayRow(definition));\n  }\n  return answer;\n}\n\nexport function sanitizeInitialArrayValue(\n  definition: IFormDefinition,\n  value?: any[],\n  minimum?: number\n) {\n  const sanitizedValue = (value || []).map(v => sanitizeValues(definition, v));\n  const available = sanitizedValue.length;\n  const missing = (minimum || 0) - available;\n  if (missing < 0) {\n    return sanitizedValue;\n  }\n  return [...sanitizedValue, ...getNewArrayRows(missing, definition)];\n}\n\n/**\n * Converts the given value from a string to the type defined in the property definition\n *\n * This is a candidate for removal as it's a workaround\n *\n * @param property\n * @param value\n * @param defaultValue\n */\nexport function massageValue(\n  property: IFormDefinitionProperty,\n  value?: any,\n  defaultValue?: any\n) {\n  switch (property.type) {\n    case 'number':\n      return parseInt(value || defaultValue || 0, 10);\n    case 'boolean':\n    case 'switch':\n    case 'checkbox':\n      return (\n        String(value || defaultValue || 'false').toLocaleLowerCase() === 'true'\n      );\n    case 'array':\n      const minElements =\n        typeof property.arrayDefinitionOptions !== 'undefined'\n          ? property.arrayDefinitionOptions.minElements\n          : 0;\n      return sanitizeInitialArrayValue(\n        property.arrayDefinition || {},\n        value || defaultValue,\n        minElements\n      );\n    case 'mapset': {\n      const answer = value;\n      const defaultValueObject =\n        typeof defaultValue === 'string'\n          ? JSON.parse(defaultValue)\n          : defaultValue;\n      if (typeof answer === 'undefined') {\n        return defaultValueObject;\n      }\n      if (typeof answer === 'string') {\n        const answerObject = JSON.parse(answer);\n        if (Object.keys(answerObject).length === 0) {\n          return defaultValueObject;\n        } else {\n          return answerObject;\n        }\n      }\n      return answer;\n    }\n    case 'select': {\n      if (property.fieldAttributes && property.fieldAttributes.multiple) {\n        return value || defaultValue || [];\n      }\n      if (property?.fieldAttributes?.allowEmptyValue) {\n        return value || defaultValue;\n      }\n      // select controls in syndesis need to default\n      // to the first available value if no value\n      // is set\n      const theFirstElement =\n        property.enum && property.enum.length > 0\n          ? property.enum![0].value\n          : '';\n      return value || defaultValue || theFirstElement;\n    }\n    case 'multi': {\n      return value || defaultValue || [];\n    }\n    default: {\n      return value || defaultValue || '';\n    }\n  }\n}\n\nexport function renderFileName(inputText: string) {\n  if (typeof inputText === 'string') {\n    const match = inputText.match(/:(.*)/);\n    if (match) {\n      return match[1];\n    }\n  }\n  return '';\n}\n","import { Field, FieldArray } from 'formik';\nimport * as React from 'react';\nimport { AutoFormContext } from './AutoFormContext';\nimport {\n  IFormArrayControlProps,\n  IFormControlProps,\n  IFormDefinition,\n  IRenderFieldProps,\n} from './models';\nimport { enrichAndOrderProperties, massageType, sanitizeValues } from './utils';\nimport { FormArrayComponent, FormInputComponent } from './widgets';\n\nexport function useFormBuilder() {\n  const autoFormContext = React.useContext(AutoFormContext);\n  /**\n   * Converts a property configuration to some kind of input field\n   *\n   * @param props\n   */\n  const getField = (props: IRenderFieldProps): any => {\n    // Massage the value in the definition to an input type\n    const type = massageType(props.property);\n    const componentTypemaps = autoFormContext.typemaps;\n    switch (type) {\n      case 'array':\n        return (\n          <FieldArray\n            {...(props as IFormArrayControlProps)}\n            key={props.property.name}\n            name={props.property.name}\n          >\n            {(helpers: any) => (\n              <FormArrayComponent\n                {...(props as IFormControlProps)}\n                {...helpers}\n              />\n            )}\n          </FieldArray>\n        );\n      default:\n        return (\n          <Field\n            key={props.property.name}\n            {...(props as IFormControlProps)}\n            name={props.property.name}\n            disabled={props.property.disabled}\n            type={type}\n            component={componentTypemaps[type] || FormInputComponent}\n          />\n        );\n    }\n  };\n\n  const getPropertiesArray = (definition: IFormDefinition) =>\n    enrichAndOrderProperties(definition);\n\n  const getInitialValues = (definition: IFormDefinition, initialValues: any) =>\n    sanitizeValues<any>(definition, initialValues);\n\n  return {\n    getField,\n    getInitialValues,\n    getPropertiesArray,\n  };\n}\n","import { getIn } from 'formik';\nimport { IFormControlProps } from '../models';\n\nexport function getValidationState({ form, field }: IFormControlProps) {\n  const error = getErrorText(form.errors, field.name);\n  const touched = getIn(form.touched, field.name);\n  return touched && error ? false : touched ? undefined : undefined;\n}\n\nexport function getErrorText(errors: any, fieldName: string) {\n  return getIn(errors, fieldName) || errors[fieldName];\n}\n\nexport function getHelperText(\n  fieldName: string,\n  description: string | undefined,\n  errors: any\n) {\n  const helperText = description || '';\n  const errorText = getErrorText(errors, fieldName);\n  const helperTextInvalid =\n    helperText !== '' ? `${helperText} - ${errorText}` : errorText;\n  return { helperText, helperTextInvalid };\n}\n\n/**\n * Returns a valid DOM id from the given string\n *\n * @param value\n */\nexport function toValidHtmlId(value?: string) {\n  return value\n    ? value.replace(/[^a-zA-Z0-9]+/g, '-').toLowerCase()\n    : ((value || '') as string);\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport './Form.css';\n\ninterface IFormContextProps {\n  direction: AutoFormDirection;\n}\n\ninterface IFormProps\n  extends React.DetailedHTMLProps<\n    React.FormHTMLAttributes<HTMLFormElement>,\n    HTMLFormElement\n  > {\n  direction?: AutoFormDirection;\n  withoutFormTag?: boolean;\n}\n\nexport type AutoFormDirection = 'horizontal' | 'vertical';\n\nexport const FormContext = React.createContext<IFormContextProps>({\n  direction: 'horizontal',\n});\n\nexport const Form: React.FC<IFormProps> = ({\n  direction,\n  withoutFormTag,\n  children,\n  className,\n  ...props\n}) => (\n  <FormContext.Provider value={{ direction: direction || 'horizontal' }}>\n    {withoutFormTag ? (\n      <div className={classNames('AutoForm_Form', className)}>{children}</div>\n    ) : (\n      <form className={classNames('AutoForm_Form', className)} {...props}>\n        {children}\n      </form>\n    )}\n  </FormContext.Provider>\n);\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { FormContext } from '../Form';\nimport './AutoFormFormGroup.css';\nimport { AutoFormDirection } from '../Form/Form';\nimport { Tooltip } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { AutoFormRenderAfterField, IFormControlProps } from 'src/models';\nimport { FormikErrors } from 'formik';\n\nexport interface IAutoFormFormGroupProps\n  extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  children?: React.ReactNode;\n  className?: string;\n  label?: React.ReactNode;\n  labelHint?: React.ReactNode;\n  isRequired?: boolean;\n  isValid?: boolean;\n  validated?: 'success' | 'error' | 'default';\n  isInline?: boolean;\n  helperText?: React.ReactNode;\n  helperTextInvalid?: React.ReactNode | FormikErrors<any> | Array<FormikErrors<any>>;\n  fieldId: string;\n  fieldProps?: IFormControlProps;\n  renderAfterField?: AutoFormRenderAfterField;\n}\n\ninterface IAutoFormFormGroupBodyProps\n  extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  className?: string;\n  direction: AutoFormDirection;\n}\n\nexport const FormGroupHelperText: React.FC<{\n  children: React.ReactNode;\n  className: string | false;\n  fieldId: string;\n}> = ({ fieldId, className, children }) => (\n  <div\n    className={classNames('AutoForm_FormGroup-helperText', className)}\n    id={`${fieldId}-helper`}\n    aria-live=\"polite\"\n  >\n    {children}\n  </div>\n);\n\nexport const AutoFormFormGroupBody: React.FC<IAutoFormFormGroupBodyProps> = ({\n  className,\n  direction,\n  ...props\n}) => (\n  <div\n    {...props}\n    className={classNames(\n      'AutoForm_FormGroup',\n      `AutoForm_FormGroup--${direction}`,\n      className\n    )}\n  />\n);\n\nexport const AutoFormFormGroup: React.FC<IAutoFormFormGroupProps> = ({\n  validated,\n  isValid,\n  fieldId,\n  helperText,\n  helperTextInvalid,\n  isInline,\n  label,\n  labelHint,\n  isRequired,\n  className,\n  children,\n  fieldProps,\n  renderAfterField,\n  ...props\n}) => {\n  const { direction } = useContext(FormContext);\n\n  const renderHelperText = helperText && (\n    <FormGroupHelperText\n      fieldId={fieldId}\n      className={\n        validated === 'success' && 'AutoForm_FormGroup-helperText--success'\n      }\n      children={helperText}\n    />\n  );\n\n  const renderHelperInvalid = helperTextInvalid &&\n    (validated === 'error' || isValid === false) && (\n      <FormGroupHelperText\n        fieldId={fieldId}\n        className=\"AutoForm_FormGroup-helperText--error\"\n      >\n        <>{helperTextInvalid}</>\n      </FormGroupHelperText>\n    );\n\n  return (\n    <AutoFormFormGroupBody\n      {...props}\n      direction={direction || 'horizontal'}\n      className={classNames(\n        (renderHelperInvalid || renderHelperText) &&\n          'AutoForm_FormGroup--disableMargin',\n        className\n      )}\n    >\n      {label && (\n        <label className=\"AutoForm_FormGroup-formLabel\" htmlFor={fieldId}>\n          <span>\n            <span className=\"AutoForm_FormGroup-formLabel__text\">\n              {label}{' '}\n              {isRequired && (\n                <span\n                  className=\"AutoForm_FormGroup-formLabel__required\"\n                  aria-hidden=\"true\"\n                >\n                  *\n                </span>\n              )}\n              {labelHint && (\n                <Tooltip aria-label={labelHint} title={labelHint}>\n                  &nbsp;\n                  <QuestionCircleOutlined data-testid=\"tooltip\" />\n                </Tooltip>\n              )}\n            </span>\n          </span>\n        </label>\n      )}\n      <div className=\"AutoForm_FormGroup-content\">\n        {children}\n        {renderAfterField && renderAfterField(fieldProps!)}\n      </div>\n      {renderHelperInvalid || renderHelperText}\n    </AutoFormFormGroupBody>\n  );\n};\n","import * as React from 'react';\nimport {\n  IFormArrayControlProps,\n  IFormArrayDefinitionOptions,\n  IFormControlProps,\n} from '../models';\nimport { useFormBuilder } from '../useFormBuilder';\nimport { getNewArrayRow } from '../utils';\nimport { toValidHtmlId } from './helpers';\nimport { AutoFormFormGroupBody } from 'src/components/FormGroup';\nimport { Button, Divider, List, Space, Typography } from 'antd';\nimport {\n  DeleteOutlined,\n  DownOutlined,\n  PlusOutlined,\n  UpOutlined,\n} from '@ant-design/icons';\nimport './FormArrayComponent.css';\nimport classNames from 'classnames';\n\nexport const FormArrayComponent: React.FunctionComponent<IFormArrayControlProps &\n  IFormControlProps> = props => {\n  if (typeof props.property.arrayDefinition === 'undefined') {\n    return (\n      <div className=\"alert alert-warning\">\n        <span>No Array definition supplied for array type</span>\n      </div>\n    );\n  }\n  const { getField, getPropertiesArray, getInitialValues } = useFormBuilder();\n  const definition = props.property.arrayDefinition;\n  const options =\n    props.property.arrayDefinitionOptions ||\n    ({} as IFormArrayDefinitionOptions);\n  const formGroupAttributes = options.formGroupAttributes || {};\n  const fieldAttributes = options.fieldAttributes || {};\n  const controlLabelAttributes = options.controlLabelAttributes || {};\n  const arrayControlAttributes = options.arrayControlAttributes || {};\n  const arrayRowTitleAttributes = options.arrayRowTitleAttributes || {};\n  const minElements = options.minElements || 0;\n  const values =\n    props.form.values[props.name] || props.property.defaultValue || [];\n  const myId = toValidHtmlId(props.name);\n\n  return (\n    <AutoFormFormGroupBody direction=\"vertical\" id={myId} data-testid={myId}>\n      <List\n        className=\"AutoForm_FormArray\"\n        dataSource={values}\n        rowKey={(item: any) => item.name}\n        renderItem={(value, index) => {\n          const fieldName = `${props.name}[${index}]`;\n          const rowValue = getInitialValues(definition, value);\n          const propertiesArray = getPropertiesArray(definition);\n          const controlGroupName = `${fieldName}-array-controls`;\n          const controlGroupId = toValidHtmlId(`${controlGroupName}-control`);\n          return (\n            <List.Item className=\"AutoForm_FormArray-listItem\">\n              {(!!options.showSortControls || !!options.rowTitle) && (\n                <Space\n                  direction=\"horizontal\"\n                  className=\"AutoForm_FormArray-listItem-header\"\n                >\n                  <Typography.Text\n                    strong\n                    {...arrayRowTitleAttributes}\n                    children={\n                      options.rowTitle\n                        ? `${index + 1}. ${options.rowTitle}`\n                        : ''\n                    }\n                  />\n                  {options.showSortControls && (\n                    <Space\n                      {...arrayControlAttributes}\n                      key={controlGroupName}\n                      direction=\"horizontal\"\n                      id={controlGroupId}\n                    >\n                      {options.showSortControls && (\n                        <>\n                          <Button\n                            shape=\"circle\"\n                            size=\"small\"\n                            data-testid=\"condition-move-up\"\n                            onClick={() => {\n                              props.move(index, index - 1);\n                            }}\n                            disabled={!(index > 0)}\n                          >\n                            <UpOutlined />\n                          </Button>\n                          <Button\n                            shape=\"circle\"\n                            size=\"small\"\n                            data-testid=\"condition-move-down\"\n                            onClick={() => {\n                              props.move(index, index + 1);\n                            }}\n                            disabled={!(index < values.length - 1)}\n                          >\n                            <DownOutlined />\n                          </Button>\n                        </>\n                      )}\n                      <Button\n                        danger\n                        shape=\"circle\"\n                        size=\"small\"\n                        data-testid=\"condition-delete\"\n                        onClick={() => props.remove(index)}\n                        disabled={!(values.length > minElements)}\n                      >\n                        <DeleteOutlined />\n                      </Button>\n                    </Space>\n                  )}\n                </Space>\n              )}\n              <Divider className=\"AutoForm_FormArray-divider\" />\n              <div\n                {...formGroupAttributes}\n                className={classNames(\n                  'AutoForm_FormArray-fields',\n                  formGroupAttributes.className\n                )}\n              >\n                {propertiesArray.map(property => {\n                  const propertyFieldName = `${fieldName}.${property.name}`;\n\n                  return getField({\n                    allFieldsRequired: props.allFieldsRequired || false,\n                    property: {\n                      controlLabelAttributes,\n                      fieldAttributes,\n                      formGroupAttributes,\n                      ...property,\n                      key: propertyFieldName,\n                      name: propertyFieldName,\n                    },\n                    uploadFile: props.uploadFile,\n                    renderFileName: props.renderFileName,\n                    renderCustomField: props.renderCustomField,\n                    onChangeCustom: props.onChangeCustom,\n                    value: rowValue[property.name],\n                  });\n                })}\n              </div>\n            </List.Item>\n          );\n        }}\n      />\n      <Button\n        data-testid=\"form-array-control-add-another-item-button\"\n        onClick={() => props.push(getNewArrayRow(definition))}\n        type=\"dashed\"\n      >\n        <PlusOutlined />\n        &nbsp;\n        {options.i18nAddElementText || 'Add Another'}\n      </Button>\n    </AutoFormFormGroupBody>\n  );\n};\n","import { Typography } from 'antd';\nimport * as React from 'react';\nimport { AutoFormFormGroupBody } from 'src/components/FormGroup';\nimport { IFormControlProps } from '../models';\n\nexport const FormLegendComponent: React.FunctionComponent<IFormControlProps> = props => (\n  <AutoFormFormGroupBody direction=\"vertical\">\n    <Typography.Title\n      level={4}\n      children={props.property.displayName}\n      ellipsis\n    />\n  </AutoFormFormGroupBody>\n);\n","import { Input } from 'antd';\nimport * as React from 'react';\nimport { IFormControlProps } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\nimport { AutoFormFormGroup } from 'src/components';\n\nexport const FormInputComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const { value, onChange, ...field } = props.field;\n  const id = toValidHtmlId(field.name);\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    if (props.onChangeCustom) {\n      props.onChangeCustom(field.name, event.currentTarget.value);\n    } else {\n      onChange(event);\n    }\n  };\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n\n  const isValid = getValidationState(props);\n  let CurrentInput: typeof Input | typeof Input.Password = Input;\n  if (props.property.secret) {\n    CurrentInput = Input.Password;\n  }\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={isValid}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n      fieldProps={props}\n      renderAfterField={props.renderAfterField}\n    >\n      <CurrentInput\n        {...props.property.fieldAttributes}\n        {...field}\n        value={value}\n        data-testid={id}\n        id={id}\n        aria-label={props.property.displayName || field.name}\n        disabled={props.form.isSubmitting || props.property.disabled}\n        placeholder={props.property.placeholder}\n        type={props.type}\n        onChange={handleChange}\n        title={props.property.controlHint}\n        list={`${id}-list`}\n        status={isValid === false ? 'error' : undefined}\n      />\n      {props.property.dataList && props.property.dataList.length > 0 && (\n        <datalist id={`${id}-list`}>\n          {props.property.dataList.map((opt, index) => (\n            <option key={index} value={opt}>\n              {opt}\n            </option>\n          ))}\n        </datalist>\n      )}\n    </AutoFormFormGroup>\n  );\n};\n","import * as React from 'react';\nimport { DeleteOutlined, UploadOutlined } from '@ant-design/icons';\nimport { IFormFilesControlProps } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\nimport { AutoFormFormGroup } from 'src/components';\nimport { Button, Input, Upload } from 'antd';\nimport { RcFile } from 'antd/lib/upload';\nimport classNames from 'classnames';\nimport './FormFilesComponent.css';\n\nexport const FormFilesComponent: React.FunctionComponent<IFormFilesControlProps> = props => {\n  const { value, onChange, ...field } = props.field;\n  const id = toValidHtmlId(field.name);\n\n  const triggerChange = async (file: RcFile | string, filename: string) => {\n    if (!props.uploadFile) {\n      throw new Error('\"uploadFile\" function should be declared!');\n    }\n    if (!props.onChangeCustom) {\n      throw new Error('\"onChangeCustom\" function should be declared!');\n    }\n\n    const currentValue =\n      (await props.uploadFile({\n        filename,\n        file: file as RcFile,\n        fieldName: field.name,\n      })) || '';\n    props.onChangeCustom(field.name, currentValue);\n\n    return false;\n  };\n\n  const handleChange = (file: RcFile) => triggerChange(file, file.name);\n  const handleClear = () => triggerChange('', '');\n\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n  const isValid = getValidationState(props);\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={isValid}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n    >\n      <Input.Group\n        className={classNames(\n          'AutoForm_FormFilesComponent',\n          !!value && 'AutoForm_FormFilesComponent--withValue'\n        )}\n        compact\n      >\n        {!!value && (\n          <>\n            <Input\n              tabIndex={-1}\n              disabled\n              value={value}\n              className=\"AutoForm_FormFilesComponent-input\"\n              status={isValid === false ? 'error' : undefined}\n            />\n            <Button\n              disabled={props.form.isSubmitting || props.property.disabled}\n              className=\"AutoForm_FormFilesComponent-button\"\n              children={<DeleteOutlined />}\n              onClick={handleClear}\n            />\n          </>\n        )}\n        <Upload.Dragger\n          {...props.property.fieldAttributes}\n          {...field}\n          data-testid={id}\n          id={id}\n          maxCount={1}\n          fileList={[]}\n          beforeUpload={handleChange}\n          aria-label={props.property.displayName || field.name}\n          disabled={props.form.isSubmitting || props.property.disabled}\n          className=\"AutoForm_FormFilesComponent-dragger\"\n        >\n          <UploadOutlined /> {!value && props.localization.fileUploadText}\n        </Upload.Dragger>\n      </Input.Group>\n    </AutoFormFormGroup>\n  );\n};\n","import * as React from 'react';\nimport {\n  IFormControlProps,\n  IFormDefinitionProperty,\n  IMapsetKey,\n  IMapsetOptions,\n} from '../models';\nimport { useFormBuilder } from '../useFormBuilder';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\nimport { AutoFormFormGroup } from 'src/components';\nimport { Collapse } from 'antd';\nimport './FormMapsetComponent.css';\n\nexport const FormMapsetComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const { getField } = useFormBuilder();\n  const { value, onChange, onBlur, ...field } = props.field;\n  const mapsetValue =\n    (typeof value === 'string' ? JSON.parse(value) : value) || {};\n  const id = toValidHtmlId(field.name);\n  const mapsetOptions = props.property.mapsetOptions || ({} as IMapsetOptions);\n  const mapsetValueDefinition = {\n    ...(props.property.mapsetValueDefinition ||\n      ({} as IFormDefinitionProperty)),\n  };\n  const mapsetKeys = props.property.mapsetKeys || ([] as IMapsetKey[]);\n\n  const isValid = getValidationState(props);\n\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n\n  return (\n    <>\n      <AutoFormFormGroup\n        {...props.property.formGroupAttributes}\n        label={props.property.displayName}\n        labelHint={props.property.labelHint}\n        fieldId={id}\n        isValid={isValid}\n        isRequired={props.property.required}\n        helperText={helperText}\n        helperTextInvalid={helperTextInvalid}\n      >\n        <Collapse\n          className={\n            isValid === false ? 'AutoForm_FormMapset-collapse--error' : ''\n          }\n        >\n          <Collapse.Panel\n            key=\"1\"\n            header={\n              <AutoFormFormGroup\n                fieldId={`${id}-mapset-header`}\n                label={mapsetOptions.i18nKeyColumnTitle}\n              >\n                {mapsetOptions.i18nValueColumnTitle}\n              </AutoFormFormGroup>\n            }\n          >\n            {mapsetKeys\n              .sort((a, b) => a.displayName.localeCompare(b.displayName))\n              .map(mapsetKey =>\n                getField({\n                  allFieldsRequired: false,\n                  property: {\n                    ...mapsetValueDefinition,\n                    name: `${field.name}.${mapsetKey.name}`,\n                    displayName: mapsetKey.displayName,\n                  },\n                  value: mapsetValue[mapsetKey.name],\n                })\n              )}\n          </Collapse.Panel>\n        </Collapse>\n      </AutoFormFormGroup>\n    </>\n  );\n};\n","import { Select } from 'antd';\nimport * as React from 'react';\nimport { IFormControlProps } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\nimport { AutoFormFormGroup } from 'src/components';\n\nexport const FormSelectComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const isMultiple =\n    props.property.fieldAttributes && props.property.fieldAttributes.multiple;\n  const { onChange, onBlur, value, ...field } = props.field;\n  const id = toValidHtmlId(field.name);\n\n  const adjustValue = () => {\n    if (isMultiple) {\n      let arrayValue = value;\n      if (!value) {\n        arrayValue = [];\n      } else if (typeof value === 'string') {\n        if (value.startsWith('[')) {\n          arrayValue = JSON.parse(value);\n        } else {\n          arrayValue = [value];\n        }\n      }\n      return arrayValue;\n    } else {\n      if (typeof value !== 'string' && value) {\n        return value?.toString();\n      }\n      return value;\n    }\n  };\n\n  const updatedValue = adjustValue();\n  const handleChange = (currentValue: string | string[]) => {\n    if (props.onChangeCustom) {\n      return props.onChangeCustom(field.name, currentValue);\n    }\n    props.form.setFieldValue(props.field.name, currentValue);\n  };\n\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description || props.property.controlHint,\n    props.form.errors\n  );\n  const isValid = getValidationState(props);\n  const {\n    allowEmptyValue,\n    ...fieldAttributes\n  } = props.property.fieldAttributes!;\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={isValid}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n      fieldProps={props}\n      renderAfterField={props.renderAfterField}\n    >\n      <Select\n        {...fieldAttributes}\n        {...field}\n        className=\"AutoForm_field--fullWidth\"\n        onChange={handleChange}\n        data-testid={id}\n        id={id}\n        aria-label={props.property.displayName || props.field.name}\n        placeholder={props.property.placeholder}\n        disabled={props.form.isSubmitting || props.property.disabled}\n        status={isValid === false ? 'error' : undefined}\n        value={updatedValue === undefined ? undefined : updatedValue}\n        mode={isMultiple ? 'multiple' : undefined}\n        options={(props.property.enum || []).map((opt: any) => ({\n          ...opt,\n          value: opt.value,\n          label: opt.label,\n        }))}\n      />\n    </AutoFormFormGroup>\n  );\n};\n","import * as React from 'react';\nimport { Input } from 'antd';\nimport { AutoFormFormGroup } from 'src/components';\nimport { IFormControlProps } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\n\nexport const FormTextAreaComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const { value, onChange, ...field } = props.field;\n  const id = toValidHtmlId(field.name);\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (props.onChangeCustom) {\n      props.onChangeCustom(field.name, event.target.value);\n    } else {\n      onChange(event);\n    }\n  };\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n  const isValid = getValidationState(props);\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={isValid}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n    >\n      <Input.TextArea\n        {...props.property.fieldAttributes}\n        {...props.field}\n        value={value}\n        data-testid={id}\n        id={id}\n        aria-label={props.property.displayName || field.name}\n        disabled={props.form.isSubmitting || props.property.disabled}\n        onChange={handleChange}\n        status={isValid === false ? 'error' : undefined}\n        title={props.property.controlHint}\n      />\n    </AutoFormFormGroup>\n  );\n};\n","/**\n * This is essentially SelectComponent.tsx except for the typeahead feature\n * of PF.\n * TODO: Allow customization of options, such as isCreatable.\n */\n\nimport { PlusOutlined } from '@ant-design/icons';\nimport { Button, Divider, Input, InputRef, Select, Space } from 'antd';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { AutoFormFormGroup } from 'src/components';\nimport { IFormControlProps } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\n\nexport const FormTypeaheadComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const [name, setName] = useState('');\n  const inputRef = React.useRef<InputRef>(null);\n\n  const { onChange, onBlur, value, ...field } = props.field;\n  const id = toValidHtmlId(field.name);\n\n  const handleChange = (currentValue: string | string[]) => {\n    if (props.onChangeCustom) {\n      return props.onChangeCustom(field.name, currentValue);\n    }\n    props.form.setFieldValue(props.field.name, currentValue);\n  };\n\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  const addItem = (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    if (!(props.property.enum || []).some(v => v.value === name) && name) {\n      handleChange(name);\n      setName('');\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, 0);\n    }\n  };\n\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n  const isValid = getValidationState(props);\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={isValid}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n    >\n      <Select\n        {...props.property.fieldAttributes}\n        {...field}\n        className=\"AutoForm_field--fullWidth\"\n        onChange={handleChange}\n        data-testid={id}\n        value={value}\n        id={id}\n        aria-label={props.property.displayName || props.field.name}\n        disabled={props.form.isSubmitting || props.property.disabled}\n        status={isValid === false ? 'error' : undefined}\n        options={(props.property.enum || []).map((opt: any) => ({\n          ...opt,\n          value: opt.value,\n          label: opt.label,\n        }))}\n        allowClear\n        dropdownRender={menu => (\n          <>\n            {menu}\n            <Divider style={{ margin: '8px 0' }} />\n            <Space style={{ padding: '0 8px 4px' }}>\n              <Input\n                placeholder=\"Please enter item\"\n                ref={inputRef}\n                value={name}\n                onChange={onNameChange}\n              />\n              <Button type=\"dashed\" icon={<PlusOutlined />} onClick={addItem}>\n                {props.localization.listAddText}\n              </Button>\n            </Space>\n          </>\n        )}\n      />\n    </AutoFormFormGroup>\n  );\n};\n","import { Checkbox } from 'antd';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport * as React from 'react';\nimport { AutoFormFormGroup } from 'src/components';\nimport { IFormControlProps } from '../models';\nimport { getValidationState, toValidHtmlId } from './helpers';\n\nexport const FormCheckboxComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const { value, onChange, ...field } = props.field;\n  const id = toValidHtmlId(field.name);\n  const handleChange = (event: CheckboxChangeEvent) => {\n    if (props.onChangeCustom) {\n      props.onChangeCustom(field.name, event.target.checked);\n    } else {\n      onChange(event);\n    }\n  };\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayNameCheckbox}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isValid={getValidationState(props)}\n      helperText={props.property.description}\n      helperTextInvalid={props.form.errors[props.field.name]}\n    >\n      <Checkbox\n        {...props.property.fieldAttributes}\n        {...field}\n        onChange={handleChange}\n        aria-label={props.property.displayName || ''}\n        checked={value}\n        id={id}\n        data-testid={id}\n        disabled={props.form.isSubmitting || props.property.disabled}\n      >\n        {props.property.displayName}\n      </Checkbox>\n    </AutoFormFormGroup>\n  );\n};\n","import * as React from 'react';\nimport { IFormControlProps } from '../models';\nimport { toValidHtmlId } from './helpers';\nimport { ErrorMessage } from 'formik';\n\nexport const FormHiddenComponent: React.FunctionComponent<IFormControlProps> = props => (\n  <div {...props.property.formGroupAttributes} style={{ display: 'none' }}>\n    <input\n      {...props.property.fieldAttributes}\n      {...props.field}\n      type={props.type}\n      id={toValidHtmlId(props.field.name)}\n      data-testid={toValidHtmlId(props.field.name)}\n    />\n    <ErrorMessage className=\"error\" name={props.field.name} />\n  </div>\n);\n","import * as React from 'react';\nimport { IFormControlProps } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\nimport { AutoFormFormGroup } from 'src/components';\nimport { Input, Select } from 'antd';\n\ninterface IDuration {\n  label: string;\n  value: number;\n}\n\nconst durations = [\n  {\n    label: 'Milliseconds',\n    value: 1,\n  },\n  {\n    label: 'Seconds',\n    value: 1000,\n  },\n  {\n    label: 'Minutes',\n    value: 60000,\n  },\n  {\n    label: 'Hours',\n    value: 3600000,\n  },\n  {\n    label: 'Days',\n    value: 86400000,\n  },\n] as IDuration[];\n\nfunction calculateDuration(duration: IDuration, initialValue: number) {\n  return initialValue / duration.value;\n}\n\nfunction calculateValue(duration: IDuration, value: number) {\n  return value * duration.value;\n}\n\nexport const FormDurationComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const { value, onChange, ...field } = props.field;\n  // find the highest duration that keeps the duration above 1\n  const index = durations.findIndex(d => !(value / d.value >= 1.0)) - 1;\n  // if the index is invalid than we use the highest available duration.\n  const initialDuration = durations[index] || durations[durations.length - 1];\n  const [duration, setDuration] = React.useState(initialDuration);\n\n  const handleSelect = (\n    selectedValue: IDuration['value'],\n    selectedDuration: IDuration\n  ) => {\n    const inputValue = calculateDuration(duration, props.field.value);\n    setDuration(selectedDuration);\n    props.form.setFieldValue(\n      field.name,\n      calculateValue(selectedDuration, inputValue),\n      true\n    );\n  };\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    props.form.setFieldValue(\n      field.name,\n      calculateValue(duration, parseInt(event.target.value, 10)),\n      true\n    );\n  };\n\n  const id = toValidHtmlId(field.name);\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n  const isValid = getValidationState(props);\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={isValid}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n    >\n      <Input.Group compact>\n        <Input\n          {...props.property.fieldAttributes}\n          data-testid={id}\n          id={id}\n          defaultValue={`${calculateDuration(duration, props.field.value)}`}\n          disabled={props.form.isSubmitting || props.property.disabled}\n          onChange={handleChange}\n          title={props.property.controlHint}\n          type=\"number\"\n          min=\"0\"\n          style={{ ...props.property?.fieldAttributes?.style, width: '70%' }}\n        />\n        <Select\n          style={{ width: '30%' }}\n          disabled={props.form.isSubmitting || props.property.disabled}\n          value={duration.value}\n          options={durations.map(d => ({\n            label: d.label,\n            value: d.value,\n          }))}\n          onSelect={handleSelect}\n        />\n      </Input.Group>\n    </AutoFormFormGroup>\n  );\n};\n","import { DatePicker, DatePickerProps } from 'antd';\nimport dayjs from 'dayjs';\nimport * as React from 'react';\nimport { IFormControlProps } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\nimport { AutoFormFormGroup } from 'src/components';\n\nexport const FormDateComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const { value, onChange, ...field } = props.field;\n  const id = toValidHtmlId(field.name);\n\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n\n  const handleChange = (dateValue: DatePickerProps['value']) => {\n    props.onChangeCustom!(field.name, dateValue ? dateValue.valueOf() : '');\n  };\n\n  const isValid = getValidationState(props);\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={isValid}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n    >\n      <DatePicker\n        {...props.property.fieldAttributes}\n        {...field}\n        className=\"AutoForm_field--fullWidth\"\n        placeholder={props.property.placeholder}\n        value={(value ? dayjs(value) : '') as any}\n        data-testid={id}\n        id={id}\n        aria-label={props.property.displayName || field.name}\n        disabled={props.form.isSubmitting || props.property.disabled}\n        onChange={handleChange}\n        status={isValid === false ? 'error' : undefined}\n      />\n    </AutoFormFormGroup>\n  );\n};\n","import { Switch } from 'antd';\nimport * as React from 'react';\nimport { IFormControlProps } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\nimport { AutoFormFormGroup } from 'src/components';\n\nexport const FormSwitchComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const { value, onChange, ...field } = props.field;\n  const id = toValidHtmlId(field.name);\n\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n\n  const isValid = getValidationState(props);\n\n  const handleChange = (checked: boolean) => {\n    props.onChangeCustom!(field.name, checked);\n  };\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={isValid}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n    >\n      <Switch\n        {...props.property.fieldAttributes}\n        {...field}\n        disabled={props.form.isSubmitting || props.property.disabled}\n        checked={value}\n        data-testid={id}\n        id={id}\n        aria-label={props.property.displayName || field.name}\n        onChange={handleChange}\n      />\n    </AutoFormFormGroup>\n  );\n};\n","import { Select } from 'antd';\nimport * as React from 'react';\nimport { IFormControlProps } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\nimport { AutoFormFormGroup } from 'src/components';\n\nexport const FormMultiSelectComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const { value, onChange, ...field } = props.field;\n  const id = toValidHtmlId(field.name);\n\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n\n  const isValid = getValidationState(props);\n\n  const handleChange = (checked: boolean) => {\n    props.onChangeCustom!(field.name, checked);\n  };\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={getValidationState(props)}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n    >\n      <Select\n        {...props.property.fieldAttributes}\n        {...field}\n        className=\"AutoForm_field--fullWidth\"\n        value={value}\n        mode=\"multiple\"\n        disabled={props.form.isSubmitting || props.property.disabled}\n        status={isValid === false ? 'error' : undefined}\n        data-testid={id}\n        id={id}\n        aria-label={props.property.displayName || field.name}\n        onChange={handleChange}\n      />\n    </AutoFormFormGroup>\n  );\n};\n","import * as React from 'react';\nimport { AutoFormFormGroup } from 'src/components';\nimport { IFormControlProps } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\n\nexport const FormCustomComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const { value, onChange, ...field } = props.field;\n  const id = toValidHtmlId(field.name);\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={getValidationState(props)}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n    >\n      {props.renderCustomField && props.renderCustomField(props)}\n    </AutoFormFormGroup>\n  );\n};\n","import * as React from 'react';\nimport { IFormControlProps, IFormPropertyValue } from '../models';\nimport { getHelperText, getValidationState, toValidHtmlId } from './helpers';\nimport { Button, Divider, Input, InputRef, Select, Space } from 'antd';\nimport { AutoFormFormGroup } from 'src/components';\nimport { PlusOutlined } from '@ant-design/icons';\n\nexport const FormListComponent: React.FunctionComponent<IFormControlProps> = props => {\n  const field = props.field;\n  const value: string[] = field.value;\n  const enumOptions = props.property.enum;\n  const id = toValidHtmlId(field.name);\n  const [inputValue, setInputValue] = React.useState('');\n  const inputRef = React.useRef<InputRef>(null);\n  const options = React.useMemo(() => {\n    const currentValue: string[] = (value || []).filter(\n      v =>\n        !(enumOptions || []).some((o: IFormPropertyValue) => {\n          if (typeof o === 'string') {\n            return v === o;\n          }\n          return v === o.value;\n        })\n    );\n\n    return ((enumOptions as Array<IFormPropertyValue | string>) || [])\n      .concat(currentValue)\n      .map(v =>\n        typeof v === 'string'\n          ? { label: v, value: v }\n          : { label: v.label || v.value, value: v.value }\n      );\n  }, [value, enumOptions]);\n\n  const onChange = (newValue: string) => {\n    if (props.onChangeCustom) {\n      props.onChangeCustom(field.name, newValue);\n    }\n  };\n\n  const onAddItem = (e: any) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (props.onChangeCustom && inputValue) {\n      if (!value.includes(inputValue)) {\n        props.onChangeCustom(field.name, (value || []).concat(inputValue));\n      }\n    }\n    setInputValue('');\n    setTimeout(() => {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, 0);\n  };\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    setInputValue(event.target.value);\n\n  const { helperText, helperTextInvalid } = getHelperText(\n    props.field.name,\n    props.property.description,\n    props.form.errors\n  );\n  const isValid = getValidationState(props);\n\n  return (\n    <AutoFormFormGroup\n      label={props.property.displayName}\n      labelHint={props.property.labelHint}\n      {...props.property.formGroupAttributes}\n      fieldId={id}\n      isRequired={props.property.required}\n      isValid={isValid}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n    >\n      <Select\n        showSearch={false}\n        disabled={props.form.isSubmitting || props.property.disabled}\n        value={(value as any) || undefined}\n        data-testid={id}\n        id={id}\n        aria-label={props.property.displayName || field.name}\n        mode=\"multiple\"\n        placeholder={props.property.placeholder}\n        className=\"AutoForm_field--fullWidth\"\n        status={isValid === false ? 'error' : undefined}\n        onChange={onChange}\n        dropdownRender={menu => (\n          <>\n            {options.length === 0 ? null : menu}\n            <Divider style={{ margin: '8px 0' }} />\n            <Space style={{ padding: '0 8px 4px', width: '100%' }}>\n              <Input\n                placeholder=\"...\"\n                ref={inputRef}\n                value={inputValue}\n                onChange={onInputChange}\n                onPressEnter={onAddItem}\n              />\n              <Button type=\"dashed\" icon={<PlusOutlined />} onClick={onAddItem}>\n                {props.localization.listAddText}\n              </Button>\n            </Space>\n          </>\n        )}\n        options={options}\n      />\n    </AutoFormFormGroup>\n  );\n};\n","import * as React from 'react';\nimport {\n  FormCheckboxComponent,\n  FormDurationComponent,\n  FormHiddenComponent,\n  FormLegendComponent,\n  FormMapsetComponent,\n  FormSelectComponent,\n  FormTextAreaComponent,\n  FormTypeaheadComponent,\n  FormFilesComponent,\n  FormInputComponent,\n  FormDateComponent,\n  FormSwitchComponent,\n  FormMultiSelectComponent,\n  FormCustomComponent,\n  FormListComponent,\n} from './widgets';\n\nexport interface IComponentTypemap {\n  [name: string]: Record<string, any>;\n}\n\nexport interface IAutoFormContext {\n  typemaps: IComponentTypemap;\n}\n\nexport const AutoFormContextDefaultValue = {\n  typemaps: {\n    checkbox: FormCheckboxComponent,\n    duration: FormDurationComponent,\n    files: FormFilesComponent,\n    hidden: FormHiddenComponent,\n    legend: FormLegendComponent,\n    mapset: FormMapsetComponent,\n    select: FormSelectComponent,\n    textarea: FormTextAreaComponent,\n    text: FormInputComponent,\n    typeahead: FormTypeaheadComponent,\n    date: FormDateComponent,\n    switch: FormSwitchComponent,\n    multi: FormMultiSelectComponent,\n    custom: FormCustomComponent,\n    list: FormListComponent,\n  },\n} as IAutoFormContext;\n\nexport const AutoFormContext = React.createContext<IAutoFormContext>(\n  AutoFormContextDefaultValue\n);\n","import {\n  FieldArrayRenderProps,\n  FieldProps,\n  FormikHelpers as FormikActions,\n} from 'formik';\nimport { ReactNode } from 'react';\n\n/**\n * The top-level object that makes up a form definition, basically a map of properties\n */\nexport type IFormDefinition<TFields extends string = string> = Record<\n  TFields,\n  IFormDefinitionProperty\n>;\n\nexport interface IFormValue {\n  [name: string]: any;\n}\n\nexport interface IFormErrors<T> {\n  [name: string]: string;\n}\n\nexport interface IWhen {\n  value?:\n    | string\n    | ((\n        value: string,\n        currentDefinition: IFormDefinition\n      ) => boolean | Record<string, any>);\n  id?: string;\n}\n\nexport enum WhenActionType {\n  ENABLE = 'ENABLE',\n  DISABLE = 'DISABLE',\n}\n\nexport interface IFormPropertyRelation {\n  when?: IWhen[];\n  action?: 'ENABLE' | 'DISABLE';\n}\n\nexport interface IFormPropertyValue {\n  value?: string;\n  label?: string;\n}\n\nexport interface IFormFieldAttributes {\n  [name: string]: any;\n}\n\nexport type IAutoFormActions<T> = FormikActions<T>;\n\nexport interface IFormArrayDefinitionOptions {\n  fieldAttributes?: IFormFieldAttributes;\n  formGroupAttributes?: IFormFieldAttributes;\n  arrayControlAttributes?: IFormFieldAttributes;\n  arrayRowTitleAttributes?: IFormFieldAttributes;\n  controlLabelAttributes?: IFormFieldAttributes;\n  minElements?: number;\n  showSortControls?: boolean;\n  rowTitle?: string;\n  i18nAddElementText: string;\n}\n\n/**\n * Each item in a form definition is one of these\n */\nexport interface IFormDefinitionProperty {\n  // TODO: interface cleanup, for now allow random non-interpreted values through\n  [name: string]: any;\n\n  /**\n   * If the 'type' property is set to 'array' then auto-form\n   * will look at this field for a form definition object\n   * for each row.\n   */\n  arrayDefinition?: IFormDefinition;\n  /**\n   * Options object for the generated array\n   */\n  arrayDefinitionOptions?: IFormArrayDefinitionOptions;\n\n  /**\n   * Value to be set on the tooltip shown when the user hovers the mouse over the form control\n   */\n  controlHint?: string;\n\n  /**\n   * When set for a control of type 'text' these values will be available for typeahead completions\n   */\n  dataList?: string[];\n\n  /**\n   * If no value is set in the properties object, then autoform will set the property to this value\n   */\n  defaultValue?: any;\n\n  /**\n   * Sets the help text on the form control, which is the text that typically is shown below the control.\n   */\n  description?: string;\n\n  /**\n   * Whether or not this form control should be rendered disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Sets the label used for the form control, used as the text for a checkbox\n   */\n  displayName?: string;\n\n  /**\n   * Sets the label on the form group for a checkbox\n   */\n  displayNameCheckbox?: string;\n\n  /**\n   * The available values to be used for either a control of type 'select' or 'text', in the latter case auto-form will present a select control\n   */\n  enum?: IFormPropertyValue[];\n\n  /**\n   * placeholder\n   */\n  extendedOptions?: { [name: string]: any };\n  /**\n   * Extra attributes to set on the form field\n   */\n  fieldAttributes?: IFormFieldAttributes;\n\n  /**\n   * Extra attributes to set on the form group wrapper\n   */\n  formGroupAttributes?: IFormFieldAttributes;\n\n  /**\n   * When set a ? icon will be presented to the user, this content will be shown when the user clicks on the ? icon\n   */\n  labelHint?: string;\n\n  mapsetKeys?: IMapsetKey[];\n  mapsetValueDefinition?: IFormDefinitionProperty;\n  mapsetOptions?: IMapsetOptions;\n\n  /**\n   * Controls the order in which controls are laid out by auto-form, lower numbers mean higher priority\n   */\n  order?: number;\n\n  /**\n   * Sets the \"placeholder\" property for the form control\n   */\n  placeholder?: string;\n\n  /**\n   * For future usage\n   */\n  relation?: IFormPropertyRelation[];\n\n  /**\n   * Whether or not this property is required to have a value\n   */\n  required?: boolean;\n\n  /**\n   * When true a password field is rendered by auto-form instead of a plain text input box\n   */\n  secret?: boolean;\n\n  /**\n   * Sets the type of this form control.\n   */\n  type: string;\n}\n\nexport interface IMapsetKey {\n  displayName: string;\n  name: string;\n}\n\nexport interface IMapsetOptions {\n  i18nKeyColumnTitle: string;\n  i18nValueColumnTitle: string;\n}\n\nexport interface INamedConfigurationProperty extends IFormDefinitionProperty {\n  name: string;\n}\n\nexport interface IUploadFileProps {\n  filename: string;\n  file?: File;\n  fieldName: string;\n}\n\nexport interface IRenderFieldProps {\n  [name: string]: any;\n  allFieldsRequired: boolean;\n  property: INamedConfigurationProperty;\n  value: any;\n  onChangeCustom?: (name: string, value: any) => void;\n  uploadFile?: (field: IUploadFileProps) => Promise<string | undefined | void>;\n  renderAfterField?: AutoFormRenderAfterField;\n  renderFileName?: (value: string) => string;\n  renderCustomField?: IFormControlProps['renderCustomField'];\n}\n\nexport interface IFormControlProps<T = any> extends FieldProps {\n  name: string;\n  type: string;\n  errors?: IFormErrors<T>;\n  allFieldsRequired: boolean;\n  property: INamedConfigurationProperty;\n  value: T;\n  localization: Required<IAutoFormLocalization>;\n  uploadFile?: (field: IUploadFileProps) => Promise<string | undefined | void>;\n  renderFileName?: (value: string) => string;\n  onChangeCustom?: (name: string, value: any) => void;\n  renderCustomField?: (\n    props: Exclude<IFormControlProps, 'renderCustomField'>\n  ) => ReactNode;\n  renderAfterField?: AutoFormRenderAfterField;\n}\n\nexport interface IFormArrayControlProps<T = any> extends FieldArrayRenderProps {\n  name: string;\n  allFieldsRequired: boolean;\n  property: INamedConfigurationProperty;\n  value: T;\n}\n\nexport interface IFormFilesControlProps<T = any> extends IFormControlProps {\n  uploadFile?: (field: IUploadFileProps) => Promise<string | undefined | void>;\n  renderFileName?: (value: string) => string;\n  disabled?: boolean;\n  value: any;\n}\n\nexport interface IRelationFieldsObserver {\n  [key: string]: {\n    [key: string]: {\n      [WhenActionType.ENABLE]?: Array<IWhen['value']>;\n      [WhenActionType.DISABLE]?: Array<IWhen['value']>;\n    };\n  };\n}\n\nexport interface ICheckRelationsOnChange {\n  fieldName: string;\n  fieldValue: string;\n  setFieldValue?: (field: string, value: any) => void;\n}\nexport interface ISyncDefinitionAndFieldsState extends ICheckRelationsOnChange {\n  initDefinition: IFormDefinition;\n  relations: IRelationFieldsObserver;\n  mutableInitDefinition: IFormDefinition;\n  initialValues?: Record<string, any>;\n}\n\nexport interface IAutoFormLocalization {\n  listAddText?: string;\n  fileUploadText?: string;\n}\n\nexport type AutoFormRenderAfterField = (\n  fieldProps: IFormControlProps\n) => React.ReactNode | null | undefined;\n","import * as React from 'react';\nimport { isEqual } from 'lodash';\nimport {\n  IFormDefinition,\n  IRelationFieldsObserver,\n  ISyncDefinitionAndFieldsState,\n  IWhen,\n  WhenActionType,\n} from './models';\n\nconst updateRelationObserverList = (\n  relations: IRelationFieldsObserver,\n  actionType: keyof typeof WhenActionType,\n  condition: IWhen,\n  fieldKey: string\n) => {\n  if (condition.id && condition.value) {\n    if (\n      relations[condition.id] &&\n      relations[condition.id][fieldKey] &&\n      relations[condition.id][fieldKey][actionType]\n    ) {\n      relations[condition.id] = {\n        ...relations[condition.id],\n        [fieldKey]: Object.assign(relations[condition.id][fieldKey], {\n          [actionType]: relations[condition.id][fieldKey][actionType]!.concat(\n            condition.value\n          ),\n        }),\n      };\n    } else {\n      relations[condition.id] = {\n        ...relations[condition.id],\n        [fieldKey]: {\n          [actionType]: [condition.value],\n        },\n      };\n    }\n  }\n  return relations;\n};\n\nconst syncDefinitionAndFieldsState = ({\n  relations,\n  mutableInitDefinition,\n  initDefinition,\n  fieldName,\n  fieldValue,\n  setFieldValue,\n  initialValues,\n}: ISyncDefinitionAndFieldsState) => {\n  Object.keys(relations[fieldName]).forEach(linkedFieldName => {\n    Object.keys(relations[fieldName][linkedFieldName]).forEach(\n      whenActionKey => {\n        if (relations[fieldName][linkedFieldName][whenActionKey]) {\n          let whenExpression: boolean | Record<string, any> = false;\n\n          relations[fieldName][linkedFieldName][\n            whenActionKey as WhenActionType\n          ]!.some(whenValue => {\n            if (typeof whenValue === 'function') {\n              whenExpression = whenValue(fieldValue, initDefinition);\n            } else if (whenValue === fieldValue) {\n              whenExpression = true;\n            }\n            return whenExpression;\n          });\n\n          if (\n            whenActionKey === WhenActionType.ENABLE\n              ? !whenExpression\n              : whenExpression\n          ) {\n            if (setFieldValue !== undefined) {\n              setFieldValue(\n                linkedFieldName,\n                initialValues\n                  ? initialValues[linkedFieldName]\n                  : initDefinition[linkedFieldName].defaultValue\n              );\n            }\n            delete mutableInitDefinition[linkedFieldName];\n          } else {\n            if (!mutableInitDefinition[linkedFieldName]) {\n              mutableInitDefinition[linkedFieldName] = {\n                ...initDefinition[linkedFieldName],\n              };\n            }\n            if (typeof whenExpression === 'object') {\n              mutableInitDefinition[linkedFieldName] = {\n                ...initDefinition[linkedFieldName],\n                ...(whenExpression as Record<string, any>),\n              };\n              if (\n                setFieldValue !== undefined &&\n                mutableInitDefinition[linkedFieldName].enum\n              ) {\n                setFieldValue(linkedFieldName, '');\n              }\n            }\n          }\n        }\n      }\n    );\n  });\n  return mutableInitDefinition;\n};\n\nexport function useDefinitionCompiler(\n  initDefinition: IFormDefinition,\n  initialValue: any\n) {\n  const [relationObserver, setRelationObserver] = React.useState<\n    IRelationFieldsObserver\n  >({});\n  const [definition, setDefinition] = React.useState<IFormDefinition>({});\n  const prev = React.useRef<any>({ initDefinition: null, initialValue: null });\n\n  React.useEffect(() => {\n    if (\n      !isEqual(prev.current.initDefinition, initDefinition) ||\n      !isEqual(prev.current.initialValue, initialValue)\n    ) {\n      prev.current.initDefinition = initDefinition;\n      prev.current.initialValue = initialValue;\n\n      const relations = {};\n\n      Object.entries(initDefinition).forEach(([fieldKey, fieldValue]) => {\n        if (Array.isArray(fieldValue.relation)) {\n          fieldValue.relation.forEach(relation => {\n            if (\n              relation.action !== undefined &&\n              Array.isArray(relation.when) &&\n              relation.when.length\n            ) {\n              relation.when.forEach(condition => {\n                updateRelationObserverList(\n                  relations,\n                  relation.action as WhenActionType,\n                  condition,\n                  fieldKey\n                );\n              });\n            }\n          });\n        }\n      });\n\n      setRelationObserver(relations);\n\n      const newDefinition = { ...initDefinition };\n\n      Object.keys(relations).forEach(key => {\n        syncDefinitionAndFieldsState({\n          fieldName: key,\n          fieldValue:\n            (initialValue || {})[key] || initDefinition[key].defaultValue,\n          initDefinition,\n          mutableInitDefinition: newDefinition,\n          relations,\n        });\n      });\n\n      setDefinition(newDefinition);\n    }\n  }, [initDefinition, initialValue]);\n\n  const checkRelationsOnChange = ({\n    name,\n    value,\n    initialValues,\n    setFieldValue,\n  }: {\n    name: string;\n    value: any;\n    initialValues: Record<string, any>;\n    setFieldValue: (field: string, value: any) => void;\n  }) => {\n    if (relationObserver[name] !== undefined) {\n      const newDefinition = definition\n        ? { ...definition }\n        : { ...initDefinition };\n\n      syncDefinitionAndFieldsState({\n        fieldName: name,\n        fieldValue: value,\n        initDefinition,\n        mutableInitDefinition: newDefinition,\n        relations: relationObserver,\n        setFieldValue,\n        initialValues,\n      });\n\n      setDefinition(newDefinition);\n    }\n  };\n\n  return {\n    checkRelationsOnChange,\n    definition,\n  };\n}\n","import {\n  Formik,\n  FormikHelpers as FormikActions,\n  FormikErrors,\n  FormikProps,\n  FormikValues,\n} from 'formik';\nimport * as React from 'react';\nimport {\n  AutoFormContext,\n  AutoFormContextDefaultValue,\n} from './AutoFormContext';\nimport {\n  AutoFormRenderAfterField,\n  IAutoFormActions,\n  IAutoFormLocalization,\n  IFormControlProps,\n  IFormDefinition,\n  IFormErrors,\n  IUploadFileProps,\n} from './models';\nimport { useDefinitionCompiler } from './useDefinitionCompiler';\nimport { useFormBuilder } from './useFormBuilder';\nimport './AutoForm.css';\n\nexport interface IAutoFormProps<Values> {\n  /**\n   * A map of configuration properties as returned by the Syndesis API\n   */\n  definition: IFormDefinition;\n  /**\n   * The initial value that should be set on the form\n   */\n  initialValue?: Values;\n  /**\n   * If the passed in value is valid or not\n   */\n  isInitialValid?: boolean;\n  /**\n   * If all fields in the form are required or not\n   */\n  allFieldsRequired?: boolean;\n  /**\n   * Map of custom components, each key maps to the 'type'\n   * property of an IFormDefinitionProperty\n   */\n  customComponents?: { [type: string]: any };\n  /**\n   * String to be displayed when a required field isn't set\n   */\n  i18nRequiredProperty: string;\n  /**\n   * String to be displayed when some or all properties are required\n   */\n  i18nFieldsStatusText?: string;\n\n  isEditable?: boolean;\n  /**\n   * Callback function that will be called when the form is submitted\n   */\n  onSave?: (value: Values, autoFormBag: IAutoFormActions<Values>) => void;\n  /**\n   * Validation function called whenever a change or blur event occurs on the form\n   */\n  validate?: (\n    value: Values,\n    currentDefinition: IFormDefinition\n  ) => IFormErrors<Values> | Promise<IFormErrors<Values>> | undefined;\n\n  /**\n   * Validation function called to determine if the initial values are valid\n   */\n  validateInitial?: (value: Values) => IFormErrors<Values>;\n  /**\n   * Child component that will receive the form fields and submit handler\n   */\n  children: (\n    props: IAutoFormChildrenProps<Values> & FormikProps<Values>\n  ) => any;\n  enableReinitialize?: boolean;\n  validateOnBlur?: boolean;\n  validateOnChange?: boolean;\n  uploadFile?: (field: IUploadFileProps) => Promise<string | undefined | void>;\n  renderFileName?: (value: string) => string;\n  renderCustomField?: IFormControlProps['renderCustomField'];\n  renderAfterField?: AutoFormRenderAfterField;\n  localization?: IAutoFormLocalization;\n}\n\nexport interface IAutoFormChildrenProps<Values> {\n  /**\n   * Fragment containing all of the form fields\n   */\n  fields: JSX.Element;\n  /**\n   * The same fields as an array of separate elements\n   */\n  fieldsAsArray: JSX.Element[];\n  /**\n   * Function to trigger a form submit which will then trigger onSave\n   */\n  validateForm: () => Promise<IFormErrors<Values> | FormikErrors<Values>>;\n}\n\nexport const AutoForm = <Values extends FormikValues>(\n  props: IAutoFormProps<Values>\n): React.ReactElement => {\n  const { getField, getPropertiesArray, getInitialValues } = useFormBuilder();\n\n  const {\n    definition: currentDefinition,\n    checkRelationsOnChange,\n  } = useDefinitionCompiler(props.definition, props.initialValue);\n  const localization = React.useMemo(\n    () => ({\n      listAddText: 'Add',\n      fileUploadText: 'Drag a file here or browse to upload',\n      ...props.localization,\n    }),\n    [props.localization]\n  );\n\n  const propertiesArray = getPropertiesArray(currentDefinition);\n  const initialValues = getInitialValues(props.definition, props.initialValue);\n\n  const isInitialValid =\n    typeof props.validateInitial === 'function'\n      ? Object.keys(props.validateInitial(initialValues) || {}).length === 0\n      : props.isInitialValid || false;\n\n  const handleSave = async (\n    value: Values,\n    formikBag: FormikActions<Values>\n  ) => {\n    if (typeof props.onSave === 'function') {\n      await props.onSave(value, formikBag as IAutoFormActions<Values>);\n    }\n  };\n\n  const validate: (\n    values: Values\n  ) => void | Record<string, any> | Promise<FormikErrors<Values>> = values => {\n    if (props.validate) {\n      return props.validate(values, currentDefinition);\n    }\n    return undefined;\n  };\n\n  return (\n    <AutoFormContext.Provider\n      value={{\n        typemaps: {\n          ...AutoFormContextDefaultValue.typemaps,\n          ...props.customComponents,\n        },\n      }}\n    >\n      <Formik<Values>\n        initialValues={initialValues}\n        onSubmit={handleSave}\n        validateOnMount={isInitialValid}\n        validate={validate}\n        enableReinitialize={props.enableReinitialize}\n        validateOnBlur={props.validateOnBlur}\n        validateOnChange={props.validateOnChange}\n      >\n        {({ values, touched, dirty, errors, ...rest }) => {\n          const propertyComponents = propertiesArray.map(property => {\n            const err =\n              typeof errors === 'object' ? errors : { [property.name]: errors };\n            property.disabled = props.isEditable || property.disabled;\n            return getField({\n              allFieldsRequired: props.allFieldsRequired || false,\n              errors: err as IFormErrors<Values>,\n              uploadFile: props.uploadFile,\n              renderFileName: props.renderFileName,\n              renderCustomField: props.renderCustomField,\n              renderAfterField: props.renderAfterField,\n              onChangeCustom: (name, value) => {\n                if (values[name] !== value) {\n                  checkRelationsOnChange({\n                    name,\n                    setFieldValue: rest.setFieldValue,\n                    value,\n                    initialValues,\n                  });\n                }\n                rest.setFieldValue(name, value);\n              },\n              localization,\n              property,\n              value: (values || {})[property.name],\n              ...rest,\n            });\n          });\n          return props.children({\n            ...(rest as FormikProps<Values>),\n            dirty,\n            errors,\n            fields: (\n              <React.Fragment>\n                {props.i18nFieldsStatusText && (\n                  <p\n                    className=\"fields-status-pf\"\n                    dangerouslySetInnerHTML={{\n                      __html: props.i18nFieldsStatusText,\n                    }}\n                  />\n                )}\n                {propertyComponents}\n              </React.Fragment>\n            ),\n            fieldsAsArray: propertyComponents,\n            values,\n          });\n        }}\n      </Formik>\n    </AutoFormContext.Provider>\n  );\n};\n","import { IFormDefinition, IFormDefinitionProperty, IFormErrors } from './models';\n\n/**\n * Maps an API map of ConfigurationProperty objects to\n * an autoform IFormDefinition object.  Use on properties\n * objects from backend responses to ensure they're mapped\n * properly\n *\n * @param properties\n */\nexport function toFormDefinition(properties: IFormDefinition) {\n  if (!properties) {\n    throw new Error('Undefined value passed to form definition converter');\n  }\n  const answer: IFormDefinition = {};\n  Object.keys(properties).forEach(key => {\n    answer[key] = toFormDefinitionProperty(properties[key]);\n  });\n  return answer;\n}\n\n/**\n * Maps an API ConfigurationProperty object to an autoform IFormDefinitionPropertyObject\n *\n * @param property\n */\nexport function toFormDefinitionProperty(property: IFormDefinitionProperty) {\n  const {\n    cols,\n    extendedProperties,\n    max,\n    min,\n    multiple,\n    rows,\n    controlHint,\n    controlTooltip,\n    labelHint,\n    labelTooltip,\n    autoComplete,\n    ...formDefinitionProperty\n  } = property as any; // needed, ConfigurationProperty is a lie\n  return {\n    ...formDefinitionProperty,\n    ...((typeof extendedProperties === 'string'\n      ? JSON.parse(extendedProperties)\n      : extendedProperties) || {}),\n    controlHint: controlHint || controlTooltip,\n    fieldAttributes: {\n      autoComplete,\n      cols,\n      max,\n      min,\n      multiple,\n      rows,\n    },\n    labelHint: labelHint || labelTooltip,\n    relation: property.relation,\n  } as IFormDefinitionProperty;\n}\n\nexport function anyFieldsRequired(properties: IFormDefinition) {\n  return (\n    Object.keys(properties)\n      .filter(key => requiredTypeMask(properties[key].type))\n      .filter(key => properties[key].required).length > 0\n  );\n}\n\nfunction requiredTypeMask(type?: string) {\n  switch (type) {\n    case 'boolean':\n    case 'checkbox':\n    case 'hidden':\n      return false;\n    default:\n      return true;\n  }\n}\n\nexport function allFieldsRequired(properties: IFormDefinition) {\n  const keys = Object.keys(properties).filter(key =>\n    requiredTypeMask(properties[key].type)\n  );\n  const allRequired = keys.filter(key => properties[key].required);\n  if (allRequired.length === 0) {\n    return false;\n  }\n  return keys.length === allRequired.length;\n}\n\nexport function getRequiredStatusText(\n  properties: IFormDefinition,\n  allRequired: string,\n  someRequired: string,\n  noneRequired: string\n) {\n  if (allFieldsRequired(properties)) {\n    return allRequired;\n  }\n  if (anyFieldsRequired(properties)) {\n    return someRequired;\n  }\n  return noneRequired;\n}\n\n/**\n * Evaluates the values according to the given property definition and returns\n * a boolean if the supplied values are valid or not.\n *\n * @param properties\n * @param values\n */\nexport function validateConfiguredProperties(\n  properties: IFormDefinition,\n  values?: { [name: string]: any }\n) {\n  if (typeof values === 'undefined') {\n    return false;\n  }\n  const allRequired = Object.keys(properties).filter(\n    key => properties[key].required\n  );\n  if (allRequired.length === 0) {\n    return true;\n  }\n  const allRequiredSet = allRequired\n    .map(key => validateRequired(values[key]))\n    .reduce((prev, curr) => curr, false);\n  return allRequiredSet;\n}\n\n/**\n * Examine the given property and determine if it's set or not,\n * for string values this includes evaluating against ''\n *\n * @param value\n */\nfunction validateRequired(value?: any) {\n  if (typeof value === 'undefined') {\n    return false;\n  }\n  if (typeof value === 'string') {\n    return (value as string) !== '';\n  }\n  if (Array.isArray(value) && value.length === 0) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Evaluates the given values against the supplied property definition\n * object and returns an IFormErrors map that can be returned to auto-form\n *\n * @param definition\n * @param getErrorString\n * @param values\n */\nexport function validateRequiredProperties<T>(\n  definition: IFormDefinition | IFormDefinition,\n  getErrorString: (name: string) => string,\n  values?: T,\n  prefix = ''\n): IFormErrors<T> {\n  const allRequired = Object.keys(definition)\n    .filter(key => requiredTypeMask(definition[key].type))\n    .filter(key => definition[key].required);\n  if (allRequired.length === 0) {\n    return {} as IFormErrors<T>;\n  }\n  const sanitizedValues = values || ({} as T);\n  const validationResults = allRequired\n    .map(key => ({ key, defined: validateRequired(sanitizedValues[key]) }))\n    .reduce((acc, current) => {\n      if (!current.defined) {\n        acc[`${prefix}${current.key}`] = getErrorString(\n          definition[current.key].displayName || current.key\n        );\n      }\n      return acc;\n    }, {} as IFormErrors<T>);\n  const arrayValidationResults = allRequired\n    .filter(key => definition[key].type === 'array')\n    .reduce((acc, current) => {\n      const arrayValue = sanitizedValues[current] || [];\n      const arrayDefinition = definition[current].arrayDefinition!;\n      const result = arrayValue\n        .map((value: any, index: number) =>\n          validateRequiredProperties<any>(\n            arrayDefinition,\n            getErrorString,\n            value,\n            `${current}[${index}].`\n          )\n        )\n        .reduce(\n          (accInner: any, currentInner: any) => ({\n            ...accInner,\n            ...currentInner,\n          }),\n          {}\n        );\n      return { ...acc, ...result };\n    }, {});\n  return { ...validationResults, ...arrayValidationResults };\n}\n\n/**\n * Stringifies non-complex types in a property map\n *\n * @param values\n */\nexport function coerceFormValues(values: any) {\n  const updated = {};\n  Object.keys(values).forEach(key => {\n    updated[key] =\n      typeof values[key] === 'object'\n        ? JSON.stringify(values[key])\n        : values[key];\n  });\n  return updated;\n}\n\nexport const getAutocompleteAttr = ({\n  secret,\n}: {\n  name: string;\n  secret?: boolean;\n}) => {\n  if (secret === true) {\n    return 'new-password';\n  }\n  return undefined;\n};\n","import { IFormDefinition, IFormDefinitionProperty } from './models';\nimport { useDefinitionCompiler } from './useDefinitionCompiler';\n\ntype IFormDefinitionValues<TFields extends string = string> = Record<\n  TFields,\n  IFormDefinitionProperty & {\n    labelValue?: any;\n  }\n>;\n\nconst getLabeledValues = (\n  definition: IFormDefinition,\n  initialValue: Record<string, any>\n) =>\n  Object.keys(definition).reduce((acc, key) => {\n    acc[key] = definition[key];\n    if (acc[key].enum) {\n      acc[key].labelValue =\n        (acc[key].enum!.find(e => initialValue[key] === e.value) || {}).label ||\n        initialValue[key];\n      return acc;\n    }\n    acc[key].labelValue = initialValue[key];\n    return acc;\n  }, {} as IFormDefinitionValues);\n\nexport const useDefinitionLabledValues = (\n  definition: IFormDefinition,\n  initialValue: Record<string, any>\n): IFormDefinitionValues => {\n  const { definition: currentDefinition } = useDefinitionCompiler(\n    definition,\n    initialValue\n  );\n\n  return getLabeledValues(currentDefinition, initialValue);\n};\n"],"names":["sanitizeValues","definition","initialValue","Object","keys","reduce","result","key","_extends2","prop","type","value","massageValue","defaultValue","_extends","enrichAndOrderProperties","filter","check","map","name","required","massageRequired","massageType","sort","a","b","aOrder","order","bOrder","property","length","secret","getNewArrayRow","getNewArrayRows","missing","answer","i","push","sanitizeInitialArrayValue","minimum","sanitizedValue","v","available","concat","parseInt","String","toLocaleLowerCase","minElements","arrayDefinitionOptions","arrayDefinition","defaultValueObject","JSON","parse","answerObject","_property$fieldAttrib","fieldAttributes","multiple","allowEmptyValue","theFirstElement","renderFileName","inputText","match","useFormBuilder","autoFormContext","React","useContext","AutoFormContext","getField","props","componentTypemaps","typemaps","createElement","FieldArray","helpers","FormArrayComponent","Field","disabled","component","FormInputComponent","getPropertiesArray","getInitialValues","initialValues","getValidationState","_ref","form","field","error","getErrorText","errors","touched","getIn","undefined","fieldName","getHelperText","description","helperText","errorText","helperTextInvalid","toValidHtmlId","replace","toLowerCase","FormContext","createContext","direction","Form","withoutFormTag","children","className","_objectWithoutPropertiesLoose","_excluded","Provider","classNames","FormGroupHelperText","fieldId","id","AutoFormFormGroupBody","_ref2","AutoFormFormGroup","_ref3","validated","isValid","label","labelHint","isRequired","fieldProps","renderAfterField","_excluded2","_useContext","renderHelperText","renderHelperInvalid","Fragment","htmlFor","Tooltip","title","QuestionCircleOutlined","_useFormBuilder","options","formGroupAttributes","controlLabelAttributes","arrayControlAttributes","arrayRowTitleAttributes","values","myId","List","dataSource","rowKey","item","renderItem","index","rowValue","propertiesArray","controlGroupName","controlGroupId","Item","showSortControls","rowTitle","Space","Typography","Text","strong","Button","shape","size","onClick","move","UpOutlined","DownOutlined","danger","remove","DeleteOutlined","Divider","propertyFieldName","allFieldsRequired","uploadFile","renderCustomField","onChangeCustom","PlusOutlined","i18nAddElementText","FormLegendComponent","Title","level","displayName","ellipsis","_props$field","onChange","handleChange","event","currentTarget","_getHelperText","CurrentInput","Input","Password","isSubmitting","placeholder","controlHint","list","status","dataList","opt","FormFilesComponent","triggerChange","file","filename","Error","Promise","resolve","then","currentValue","e","reject","handleClear","Group","compact","tabIndex","Upload","Dragger","maxCount","fileList","beforeUpload","UploadOutlined","localization","fileUploadText","FormMapsetComponent","mapsetValue","mapsetOptions","mapsetValueDefinition","mapsetKeys","Collapse","Panel","header","i18nKeyColumnTitle","i18nValueColumnTitle","localeCompare","mapsetKey","FormSelectComponent","isMultiple","adjustValue","arrayValue","startsWith","toString","updatedValue","setFieldValue","_props$property$field","Select","mode","FormTextAreaComponent","target","TextArea","FormTypeaheadComponent","_useState","useState","setName","inputRef","useRef","onNameChange","addItem","preventDefault","some","setTimeout","_inputRef$current","current","focus","allowClear","dropdownRender","menu","style","margin","padding","ref","icon","listAddText","FormCheckboxComponent","checked","displayNameCheckbox","Checkbox","FormHiddenComponent","display","ErrorMessage","durations","calculateDuration","duration","calculateValue","FormDurationComponent","_props$property","findIndex","d","initialDuration","_React$useState","setDuration","handleSelect","selectedValue","selectedDuration","inputValue","min","width","onSelect","FormDateComponent","dateValue","valueOf","DatePicker","dayjs","FormSwitchComponent","Switch","FormMultiSelectComponent","FormCustomComponent","FormListComponent","enumOptions","setInputValue","useMemo","o","newValue","onAddItem","stopPropagation","includes","onInputChange","showSearch","onPressEnter","AutoFormContextDefaultValue","checkbox","files","hidden","legend","mapset","select","textarea","text","typeahead","date","multi","custom","WhenActionType","updateRelationObserverList","relations","actionType","condition","fieldKey","_Object$assign","assign","_fieldKey","_extends3","syncDefinitionAndFieldsState","mutableInitDefinition","initDefinition","fieldValue","forEach","linkedFieldName","whenActionKey","whenExpression","whenValue","ENABLE","useDefinitionCompiler","relationObserver","setRelationObserver","_React$useState2","setDefinition","prev","useEffect","isEqual","entries","Array","isArray","relation","action","when","newDefinition","checkRelationsOnChange","AutoForm","_useDefinitionCompile","currentDefinition","isInitialValid","validateInitial","handleSave","formikBag","_temp","onSave","validate","customComponents","Formik","onSubmit","validateOnMount","enableReinitialize","validateOnBlur","validateOnChange","dirty","rest","propertyComponents","err","isEditable","fields","i18nFieldsStatusText","dangerouslySetInnerHTML","__html","fieldsAsArray","toFormDefinition","properties","toFormDefinitionProperty","cols","extendedProperties","max","rows","controlTooltip","labelTooltip","autoComplete","formDefinitionProperty","anyFieldsRequired","requiredTypeMask","allRequired","getRequiredStatusText","someRequired","noneRequired","validateConfiguredProperties","allRequiredSet","validateRequired","curr","validateRequiredProperties","getErrorString","prefix","sanitizedValues","validationResults","defined","acc","arrayValidationResults","accInner","currentInner","coerceFormValues","updated","stringify","getAutocompleteAttr","getLabeledValues","labelValue","find","useDefinitionLabledValues"],"mappings":"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"}